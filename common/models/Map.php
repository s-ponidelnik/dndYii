<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "map".
 *
 * @property int $id
 * @property string $name
 * @property string $description
 * @property string $img_name
 * @property object $image
 * @property int $type
 * @property int $owner_id
 *
 * @property User $owner
 */
class Map extends \yii\db\ActiveRecord
{

    public static function imgDir()
    {
        return Yii::$app->basePath . '/../uploads/';
    }

    public $image;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'map';
    }

    public function beforeSave($insert)
    {
        if (!is_null($this->image)) {
            $ext_arr = explode(".", $this->image->name);
            $this->img_name = Yii::$app->security->generateRandomString() . '.' . end($ext_arr);
            $this->image->saveAs(Map::imgDir() . $this->img_name);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'type', 'owner_id'], 'required'],
            [['type', 'owner_id'], 'integer'],
            [['name', 'img_name'], 'string', 'max' => 255],
            [['description'], 'string'],
            [['owner_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['owner_id' => 'id']],
            [['image'], 'safe'],
            [['image'], 'file', 'extensions' => 'jpg, gif, png'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Name'),
            'description' => Yii::t('app', 'Description'),
            'img_name' => Yii::t('app', 'Img Name'),
            'image' => Yii::t('app', 'Image'),
            'type' => Yii::t('app', 'Type'),
            'owner_id' => Yii::t('app', 'Owner ID'),
        ];
    }

    public static function getAllList($forSelect = true)
    {
        $mapList = [null => '-'];
        $maps = Map::find()->select(['id', 'name']);
        foreach ($maps->all() as $map){
            $mapList[$map->id] = $map->name;
        }
        return $mapList;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOwner()
    {
        return $this->hasOne(User::className(), ['id' => 'owner_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMarkers()
    {
        return $this->hasMany(MapMarkers::className(), ['map_id' => 'id']);
    }
}
